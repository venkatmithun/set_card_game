{"version":3,"sources":["features/game/gameSlice.js","features/game/Game.js","features/Home.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["gameSlice","createSlice","name","initialState","cards","properties","colors","numbers","shapes","deck","activeCards","solutions","possibleSets","difficulty","reducers","setDifficulty","state","action","payload","_","range","shuffle","map","id","attr","color","Math","floor","number","shape","shade","shades","createDeck","console","log","displayCards","showSolutions","upperBound","length","splice","random","caseReducers","solveDeck","threeCardSet","attributes","matchNeeded","numCards","card1","card2","card3","matchCounter","attribute","card","push","drawMore","error","checkSet","arrayOfCards","setFound","showSnackBar","j","solutionSet","i","isEqual","sortBy","newArr","includes","pop","actions","Parent","props","cardDiv","imageDiv","gameboard","document","getElementById","innerHTML","createElement","className","appendChild","activateCards","clear","solutionsDiv","title","solution","set","addEventListeners","addEventListener","setState","attempCounts","errorCounts","cleanSelect","selectedCards","bool","elements","getElementsByClassName","event","stopPropagation","classList","toggle","getAttribute","found","indexOf","parseInt","remove","array","forEach","el","show_hide","target_id","button_id","e","btn","style","display","msg","x","setTimeout","replace","this","to","onClick","disabled","href","target","React","Component","connect","game","dispatch","bindActionCreators","Home","useDispatch","flexDirection","App","path","Game","configureStore","reducer","gameReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a071236b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport _ from \"lodash\";\r\n\r\nexport const gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState: {\r\n    cards: null,\r\n    properties: {\r\n      colors: [\"green\", \"purple\", \"red\"],\r\n      numbers: [1, 2, 3],\r\n      shapes: [\"diamond\", \"oval\", \"squiggle\"],\r\n    },\r\n    deck: [],\r\n    activeCards: [],\r\n    solutions: [],\r\n    possibleSets: 0,\r\n    difficulty: 0,\r\n  },\r\n  reducers: {\r\n    setDifficulty: (state, action) => {\r\n      const difficulty = action.payload;\r\n      state.difficulty = difficulty;\r\n      if (difficulty === 0) {\r\n        state.cards = _.range(1, 28);\r\n        state.cards = _.shuffle(state.cards);\r\n        state.deck = _.map(state.cards, (id) => {\r\n          return {\r\n            id: id,\r\n            attr: {\r\n              color: state.properties.colors[Math.floor((id % 27) / 9)],\r\n              number: state.properties.numbers[Math.floor((id % 9) / 3)],\r\n              shape: state.properties.shapes[Math.floor(id % 3)],\r\n            },\r\n          };\r\n        });\r\n      } else {\r\n        state.cards = _.range(1, 82);\r\n        state.cards = _.shuffle(state.cards);\r\n        state.properties[\"shades\"] = [\"clear\", \"shaded\", \"solid\"];\r\n        state.deck = _.map(state.cards, (id) => {\r\n          return {\r\n            id: id,\r\n            attr: {\r\n              color: state.properties.colors[Math.floor((id % 81) / 27)],\r\n              number: state.properties.numbers[Math.floor((id % 27) / 9)],\r\n              shade: state.properties.shades[Math.floor((id % 9) / 3)],\r\n              shape: state.properties.shapes[Math.floor(id % 3)],\r\n            },\r\n          };\r\n        });\r\n      }\r\n      state.activeCards = [];\r\n      state.solutions = [];\r\n      state.possibleSets = 0;\r\n    },\r\n    createDeck: (state, action) => {\r\n      console.log(\"Create Deck Reducer\");\r\n      const { displayCards, showSolutions } = action.payload;\r\n      const upperBound = state.deck.length > 12 ? state.deck.length - 12 : 0;\r\n      state.activeCards = state.deck.splice(_.random(0, upperBound), 12);\r\n      displayCards(state.activeCards, state.difficulty);\r\n      gameSlice.caseReducers.solveDeck(state, action);\r\n      showSolutions(false, state.solutions, state.difficulty);\r\n    },\r\n    solveDeck: (state, action) => {\r\n      try {\r\n        console.log(\"Solve Deck Reducer\");\r\n        let threeCardSet = [];\r\n        let attributes = [];\r\n        let solutions = [];\r\n        const matchNeeded = state.difficulty === 0 ? 3 : 4;\r\n        const activeCards = [...state.activeCards];\r\n        let numCards = activeCards.length;\r\n        for (let card1 = 0; card1 < numCards - 2; card1++) {\r\n          for (let card2 = card1 + 1; card2 < numCards - 1; card2++) {\r\n            for (let card3 = card2 + 1; card3 < numCards; card3++) {\r\n              threeCardSet = [\r\n                activeCards[card1],\r\n                activeCards[card2],\r\n                activeCards[card3],\r\n              ];\r\n\r\n              let matchCounter = 0;\r\n              // iterate through atteributes of each card\r\n              for (let attribute in threeCardSet[0].attr) {\r\n                attributes = [];\r\n                for (let card in threeCardSet) {\r\n                  attributes.push(threeCardSet[card].attr[attribute]);\r\n                }\r\n                // check for same or different attributes between 3 cards\r\n                if (\r\n                  !(\r\n                    (attributes[0] === attributes[1] &&\r\n                      attributes[1] === attributes[2]) ||\r\n                    (attributes[0] !== attributes[1] &&\r\n                      attributes[1] !== attributes[2] &&\r\n                      attributes[0] !== attributes[2])\r\n                  )\r\n                ) {\r\n                  break;\r\n                } else {\r\n                  matchCounter++;\r\n                }\r\n              }\r\n              if (matchCounter === matchNeeded) {\r\n                solutions.push(threeCardSet);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(\"solutions length\", solutions.length);\r\n        if (\r\n          solutions.length === 0 &&\r\n          state.deck.length > 0 &&\r\n          state.difficulty < 2\r\n        ) {\r\n          gameSlice.caseReducers.drawMore(state, action);\r\n        }\r\n        state.solutions = solutions;\r\n        state.possibleSets = solutions.length;\r\n      } catch (error) {\r\n        console.log(\"error solving set\", error);\r\n      }\r\n    },\r\n    drawMore: (state, action) => {\r\n      const { showSolutions, displayCards } = action.payload;\r\n      const upperBound = state.deck.length > 3 ? state.deck.length - 3 : 0;\r\n      state.activeCards = [\r\n        ...state.activeCards,\r\n        ...state.deck.splice(_.random(0, upperBound), 3),\r\n      ];\r\n      displayCards(state.activeCards, state.difficulty);\r\n      gameSlice.caseReducers.solveDeck(state, action);\r\n      showSolutions(true, state.solutions, state.difficulty);\r\n    },\r\n    checkSet: (state, action) => {\r\n      try {\r\n        const {\r\n          arrayOfCards,\r\n          displayCards,\r\n          setFound,\r\n          showSnackBar,\r\n        } = action.payload;\r\n        const solutions = state.solutions;\r\n        for (let j = 0; j < solutions.length; j++) {\r\n          let solutionSet = solutions[j].map((i) => i.id);\r\n          let result = _.isEqual(_.sortBy(arrayOfCards), _.sortBy(solutionSet));\r\n          if (result) {\r\n            solutions.splice(j, 1);\r\n            let newArr = [];\r\n            let deck = [...state.deck];\r\n            if (deck.length >= 3) {\r\n              for (let i = 0; i < 3; ++i) {\r\n                newArr.push(deck.splice(0, 1)[0]);\r\n              }\r\n            }\r\n            for (let j = state.activeCards.length - 1; j >= 0; j--) {\r\n              if (arrayOfCards.includes(state.activeCards[j].id)) {\r\n                if (newArr.length > 0) {\r\n                  state.activeCards[j] = newArr.pop();\r\n                } else {\r\n                  state.activeCards.splice(j, 1);\r\n                }\r\n              }\r\n            }\r\n\r\n            state.deck = deck;\r\n            //displaying cards\r\n            displayCards(state.activeCards, state.difficulty);\r\n            if (state.possibleSets > 0) {\r\n              state.possibleSets--;\r\n            } else if (state.possibleSets === 0 && state.deck.length === 0) {\r\n              showSnackBar(\"All possible Sets already found! End\");\r\n            }\r\n            gameSlice.caseReducers.solveDeck(state, action);\r\n            setFound(true, state.solutions, state.difficulty);\r\n            return;\r\n          }\r\n        }\r\n        gameSlice.caseReducers.solveDeck(state, action);\r\n        setFound(false, state.solutions);\r\n        return;\r\n      } catch (error) {\r\n        console.log(\"Error check set\", error);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  createDeck,\r\n  solveDeck,\r\n  checkSet,\r\n  setDifficulty,\r\n  drawMore,\r\n} = gameSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = (amount) => (dispatch) => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectDeck = (state) => state.game.deck;\r\n\r\nexport default gameSlice.reducer;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport { createDeck, checkSet, setDifficulty, drawMore } from \"./gameSlice\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Parent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { attempCounts: 0, errorCounts: 0 };\r\n    this.selectedCards = [];\r\n  }\r\n\r\n  // display card on gameboard\r\n  displayCards = (activeCards = [], difficulty = 0) => {\r\n    let gameboard = document.getElementById(\"gameboard\");\r\n    gameboard.innerHTML = \"\";\r\n    let cardDiv;\r\n    let imageDiv;\r\n    for (let i = 0; i < activeCards.length; i++) {\r\n      cardDiv = document.createElement(\"div\");\r\n      cardDiv.id = activeCards[i].id;\r\n      cardDiv.className = \"card th\";\r\n      gameboard.appendChild(cardDiv);\r\n\r\n      for (let j = 0; j < activeCards[i].attr.number; j++) {\r\n        imageDiv = document.createElement(\"div\");\r\n        let shade = \"\";\r\n        if (difficulty > 0) {\r\n          shade = activeCards[i].attr.shade + \"-\";\r\n        }\r\n        imageDiv.className =\r\n          \"cardImage \" +\r\n          shade +\r\n          activeCards[i].attr.shape +\r\n          \" \" +\r\n          activeCards[i].attr.color +\r\n          \"Card\"; // producing class names that describe the card image\r\n        cardDiv.appendChild(imageDiv);\r\n      }\r\n    }\r\n    this.activateCards();\r\n  };\r\n\r\n  // display hint solutions with ready SETs\r\n  showSolutions = (clear = false, solutions = [], difficulty = 0) => {\r\n    let solutionsDiv = document.getElementById(\"solutions\");\r\n    if (clear) {\r\n      solutionsDiv.innerHTML = \"\";\r\n    }\r\n    let title = document.createElement(\"h1\");\r\n    title.innerHTML = \"Solutions\";\r\n    solutionsDiv.appendChild(title);\r\n    for (let solution in solutions) {\r\n      let set = document.createElement(\"div\");\r\n      set.className = \"set\";\r\n      let cardDiv;\r\n      let imageDiv;\r\n      solutionsDiv.appendChild(set);\r\n\r\n      for (let i = 0; i < solutions[solution].length; i++) {\r\n        cardDiv = document.createElement(\"div\");\r\n        cardDiv.className = \"cardSolution\";\r\n        set.appendChild(cardDiv);\r\n\r\n        for (let j = 0; j < solutions[solution][i].attr.number; j++) {\r\n          imageDiv = document.createElement(\"div\");\r\n          let shade = \"\";\r\n          if (difficulty > 0) {\r\n            shade = solutions[solution][i].attr.shade + \"-\";\r\n          }\r\n          imageDiv.className =\r\n            \"cardImage \" +\r\n            shade +\r\n            solutions[solution][i].attr.shape +\r\n            \" \" +\r\n            solutions[solution][i].attr.color +\r\n            \"Card\"; // producing class names that describe the card image\r\n          cardDiv.appendChild(imageDiv);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  addEventListeners = () => {\r\n    // new game session\r\n    document.getElementById(\"reset\").addEventListener(\"click\", () => {\r\n      this.props.setDifficulty(this.props.difficulty);\r\n      this.setState({ attempCounts: 0, errorCounts: 0 });\r\n      let solutionsDiv = document.getElementById(\"solutions\");\r\n      solutionsDiv.innerHTML = \"\";\r\n      this.cleanSelect(this.selectedCards);\r\n      this.selectedCards = [];\r\n      this.props.createDeck({\r\n        displayCards: this.displayCards,\r\n        showSolutions: this.showSolutions,\r\n      });\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.createDeck({\r\n      displayCards: this.displayCards,\r\n      showSolutions: this.showSolutions,\r\n    });\r\n    this.addEventListeners();\r\n  }\r\n\r\n  setFound = (bool, solutions, difficulty) => {\r\n    if (bool) {\r\n      this.showSnackBar(\"Set found!\");\r\n      this.showSolutions(true, solutions, difficulty);\r\n      this.selectedCards = [];\r\n      this.setState({ attempCounts: this.state.attempCounts + 1 });\r\n    } else {\r\n      this.showSnackBar(\"Sorry, this is not a Set!\");\r\n      this.setState({ errorCounts: this.state.errorCounts + 1 });\r\n      this.errorCounts++;\r\n    }\r\n  };\r\n\r\n  checkSet = () => {\r\n    if (this.props.solutions.length === 0) {\r\n      this.showSnackBar(\"No Sets left to find!\");\r\n    } else if (this.selectedCards.length !== 3) {\r\n      this.showSnackBar(\"To check Sets, please select 3 cards\");\r\n    } else {\r\n      this.props.checkSet({\r\n        arrayOfCards: this.selectedCards,\r\n        displayCards: this.displayCards,\r\n        setFound: this.setFound,\r\n        showSolutions: this.showSolutions,\r\n        showSnackBar: this.showSnackBar,\r\n      });\r\n    }\r\n    this.cleanSelect(this.selectedCards);\r\n    this.selectedCards = [];\r\n  };\r\n\r\n  activateCards = () => {\r\n    let elements = document.getElementsByClassName(\"card\");\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].addEventListener(\r\n        \"click\",\r\n        (event) => {\r\n          event.stopPropagation();\r\n          // alert(attribute);\r\n          elements[i].classList.toggle(\"selected\");\r\n          let id = elements[i].getAttribute(\"id\");\r\n          let found = this.selectedCards.indexOf(parseInt(id));\r\n\r\n          //selected card already clicked\r\n          if (found >= 0 && this.selectedCards.length > 0) {\r\n            elements[i].classList.remove(\"selected\");\r\n            this.selectedCards.splice(found, 1);\r\n          } else {\r\n            // Card was not selected before, add it.\r\n            if (this.selectedCards.length < 3) {\r\n              this.selectedCards.push(parseInt(id));\r\n            } else {\r\n              elements[i].classList.toggle(\"selected\");\r\n              console.log(\"Three cards already selected!\");\r\n            }\r\n          }\r\n          if (this.selectedCards.length === 3) {\r\n            this.checkSet();\r\n          }\r\n        },\r\n        false\r\n      );\r\n    }\r\n  };\r\n\r\n  cleanSelect = (array) => {\r\n    if (array.length > 0) {\r\n      _.forEach(array, (id) => {\r\n        let el = document.getElementById(id);\r\n        console.log(\"cleaning...\", id, el);\r\n        if (el) {\r\n          el.classList.remove(\"selected\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // change Hint div with ready solutions of SET game\r\n\r\n  show_hide = (target_id, button_id) => {\r\n    let e = document.getElementById(target_id);\r\n    let btn = document.getElementById(button_id);\r\n\r\n    if (e.style.display === \"block\") {\r\n      e.style.display = \"none\";\r\n      btn.innerHTML = \"Show Solutions\";\r\n    } else {\r\n      e.style.display = \"block\";\r\n      btn.innerHTML = \"Hide Solutions\";\r\n    }\r\n  };\r\n\r\n  showSnackBar = (msg) => {\r\n    var x = document.getElementById(\"snackbar\");\r\n    x.className = \"show\";\r\n    x.innerHTML = msg;\r\n    setTimeout(function () {\r\n      x.className = x.className.replace(\"show\", \"\");\r\n      x.innerHTML = \"\";\r\n    }, 3000);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"game-parent\">\r\n        <Link to=\"/\" className=\"back-home\">\r\n          <h3>Back to Home Page</h3>\r\n        </Link>\r\n        <div className=\"flex-start-center\">\r\n          <div>\r\n            <div id=\"snackbar\">Some text some message..</div>\r\n            <h1>Set Game</h1>\r\n            <h3>Select 3 cards from the deck below</h3>\r\n            <div id=\"gameboard\"></div>\r\n          </div>\r\n          <div className=\"flex-start-center flex-col pl-60\">\r\n            <h3>Possible sets: {this.props.solutions.length}</h3>\r\n            <h3>Cards left: {this.props.deck.length}</h3>\r\n            <h3>Found sets: {this.state.attempCounts}</h3>\r\n            <h3>Errors: {this.state.errorCounts}</h3>\r\n\r\n            <div className=\"flex-col\">\r\n              <button\r\n                id=\"cheatMode\"\r\n                onClick={() => this.show_hide(\"solutions\", \"cheatMode\")}\r\n              >\r\n                Show solutions\r\n              </button>\r\n\r\n              <button id=\"reset\">New Deck</button>\r\n\r\n              <button\r\n                disabled={this.props.deck.length < 1}\r\n                onClick={() =>\r\n                  this.props.drawMore({\r\n                    displayCards: this.displayCards,\r\n                    showSolutions: this.showSolutions,\r\n                  })\r\n                }\r\n              >\r\n                Draw 3\r\n              </button>\r\n\r\n              <p>\r\n                <a\r\n                  href=\"https://en.wikipedia.org/wiki/Set_(card_game)\"\r\n                  target=\"blank\"\r\n                >\r\n                  How to play?\r\n                </a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"solutions\" className=\"sol\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    deck: state.game.deck,\r\n    activeCards: state.game.activeCards,\r\n    solutions: state.game.solutions,\r\n    possibleSets: state.game.possibleSets,\r\n    difficulty: state.game.difficulty,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return bindActionCreators(\r\n    { createDeck, checkSet, setDifficulty, drawMore },\r\n    dispatch\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Parent);\r\n","import { useDispatch } from \"react-redux\";\r\nimport React from \"react\";\r\nimport { setDifficulty } from \"../features/game/gameSlice\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Home() {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <h1>SET - A Card Game</h1>\r\n      <a href=\"https://en.wikipedia.org/wiki/Set_(card_game)\" target=\"blank\">\r\n        How to play?\r\n      </a>\r\n      <div>\r\n        <h2>Play Game</h2>\r\n        <span>By choose difficulty below</span>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n          <Link to=\"/game\" onClick={() => dispatch(setDifficulty(0))}>\r\n            <h3>Easy</h3>\r\n          </Link>\r\n          <Link to=\"/game\" onClick={() => dispatch(setDifficulty(1))}>\r\n            <h3>Medium</h3>\r\n          </Link>\r\n          <Link to=\"/game\" onClick={() => dispatch(setDifficulty(2))}>\r\n            <h3>Hard</h3>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Game from \"./features/game/Game\";\r\nimport Home from \"./features/Home\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div id=\"app\">\r\n        {/* <div className=\"Header\">\r\n          <h1>Header</h1>\r\n        </div> */}\r\n        <Switch>\r\n          <Route path=\"/game\">\r\n            <Game />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n        <p id=\"footer\">Made by Venkat Mithun</p>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport gameReducer from \"../features/game/gameSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    game: gameReducer,\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      // Ignore these action types\r\n      ignoredActions: [\r\n        \"game/createDeck\",\r\n        \"game/setDifficulty\",\r\n        \"game/solveDeck\",\r\n        \"game/drawMore\",\r\n        \"game/checkSet\",\r\n      ],\r\n    },\r\n  }),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}